[
    {
        "id_lesson": 279268,
        "steps": [
            {
                "id_step": 1603722,
                "text": {
                    "text": "Здравствуйте, рады приветствовать Вас на курсе!\nНаш курс является тренажером, поэтому состоит только из практических заданий. Перед тем как приступить, обязательно прочитайте информацию с этого шага.\nРекомендуемый алгоритм успешного прохождения каждого шага курса\n\nПрочитайте текстовый материал, он достаточно короткий и всегда имеет всю необходимую информацию для выполнения практического задания.\nEсли по тексту теории встречаются примеры - скопируйте и вставьте их в окно кода, запустите запрос, не отправляя на проверку (нажать черную кнопку Запустить код). Проанализируйте результат, если он (результат) является неожиданным или не понятным - еще раз вернитесь к теории и еще раз ее прочитайте.\nТеперь можно приступать к выполнению практического задания. Прежде всего внимательно прочитайте формулировку, разберитесь, что именно нужно сделать (без этого совершенно нет смысла писать код SQL);\nЕсли задание понятно - можно приступать к реализации запроса, тут два варианта - либо Вы полностью напишете запрос на SQL, либо поищите среди примеров похожий, скопируйте его и начинайте его корректировать (скорее всего, когда пройдете десяток шагов, вариант с копированием отпадет, как ненужный).\nОтправьте запрос на проверку.  Результата может быть два - либо запрос написан верно, и он проходит - можно переходить к следующему шагу. Либо запрос система не пропускает, в нем допущена ошибка, но \"кто не ошибается, тот ничего и не делает...\", ошибки это обязательный и полезный элемент в процессе обучения;\nНачинайте отлаживать (исправлять) запрос, причем если Вам удастся это сделать самостоятельно - значит Вы  действительно разобрались с материалом шага, можно переходить к следующему. Если же ошибки исправить не удается,  не спешите паниковать, читать и писать комментарии, лезть в Интернет - просто вернитесь к 1 или 2-му пункту этого алгоритма.\nЕсли же все-таки теория и примеры не помогают, воспользуйтесь памяткой о типичных ошибках и способах их исправления (приведена ниже),  примерно половина ошибок связана с описанными в ней пунктами и, привыкнув каждый раз проверять свой запрос, Вы сбережете себе много часов и нервов (проверено на опыте).\nКогда Вы напишете правильный запрос, его можно опубликовать в решениях, посмотреть решения других студентов и обсудить свое.\nВ комментариях можно давать подсказки или делиться тем, что вызвало у Вас наибольшие трудности, только без спойлеров!\nОчень полезно прочитать вопрос другого обучающегося и, если Вы точно знаете ответ, самостоятельно ответить на его вопрос - это еще один способ закрепления материала, причем очень действенный (тоже проверено на опыте).\nПосле выполнения заданий каждого модуля, Вы будете получать ссылку на текстовый конспект этого модуля, по которому удобно ориентироваться по пройденному материалу.\n\n \nПамятка о типичных ошибках и способах их исправления\nЭта памятка написана, чтобы помочь Вам самостоятельно находить ошибки в своих запросах. Если ваш запрос не принимается системой, то возвращайтесь на эту страничку и пройдитесь по всем пунктам:\n1. Приведите синтаксис запроса к общепринятому:\n\nесли у вас есть время, стоит изучить руководство по стилю SQL https://www.sqlstyle.guide/ru/\nможете отформатировать ваш запрос с помощью, например, https://codebeautify.org/sqlformatter\nв любом случае, информации и примеров в курсе достаточно для того, чтобы писать запросы корректно.\n\n2. Проверьте, что ключевые слова, названия столбцов и значения в ячейках, которые необходимо найти, написаны правильно. Особенно обратите внимание, чтобы в русских названиях столбцов не было английских букв.\n3. Проверьте, что:\n\nколичество открывающихся скобок равно количеству закрывающихся;\nзапятые разделяют перечисление столбцов, но не ключевые слова;\nзапросы разделяются точкой с запятой.\n\n4. Проверьте, что последовательность команд указана верно (она отличается от последовательности выполнения команд в запросе):\nSELECT 'столбцы или * для выбора всех столбцов; обязательно'\n\nFROM 'таблица; обязательно'\n\nWHERE 'условие/фильтрация, например, city = 'Moscow'; необязательно'\n\nGROUP BY 'столбец, по которому хотим сгруппировать данные; необязательно'\n\nHAVING 'условие/фильтрация на уровне сгруппированных данных; необязательно'\n\nORDER BY 'столбец, по которому хотим отсортировать вывод; необязательно'\n5.  Если запрос включает подзапросы, выполните сначала подзапросы и удостоверьтесь, что получаете ожидаемый результат.\n6. Прочитайте комментарии под заданием: большинство трудностей уже обсуждалось не один раз.",
                    "tables": []
                }
            },
            {
                "id_step": 1184091,
                "text": {
                    "text": "Структура уроков курса\nПервый шаг каждого урока – краткий перечень рассматриваемых вопросов или типов запросов SQL, а также, при необходимости, описание структур данных, используемых в запросах. \nВсе остальные шаги  – это задания, в большинстве из которых нужно написать запрос на языке SQL. На локальный компьютер ничего ставить не нужно, запросы пишутся и проверяются на платформе. Перед выполнением задания необходимо прочитать краткий теоретический материал, затем разобрать пример и посмотреть, как он выполняется. Для каждого задания приводится результат, который должен получиться после выполнения запроса, а также необходимые пояснения.\nНа последнем шаге большинства уроков нужно придумать задание для рассматриваемой структуры данных, реализовать соответствующий запрос,  проверить его и при желании разместить в комментариях. В последнем модуле мы разместим лучшие запросы, и все смогут их выполнить и проголосовать за понравившиеся.\nВажно! На платформе Stepik используется MySQL, версия 8.0.21.",
                    "tables": []
                }
            },
            {
                "id_step": 3648228,
                "text": {
                    "text": "Уважаемые коллеги!\nКоманда Дальневосточного федерального университета (ДВФУ) проводит обучение по программе \n\"Основы баз данных и SQL запросов\" (72 академических часа).\n\nПрограмма реализуется несколько раз в год по мере набора группы. Обучение полностью в онлайн-формате. Предусмотрено 4 консультации с разработчиком курса, Г. П. Озеровой. \n\nОставить заявку и первым узнать о старте обучения, а также ознакомиться с содержанием можно по ссылке: https://dpo.dvfu.ru/sql-base-and-query?utm_source=online&utm_medium=affiliate&utm_campaign=stepik.\n\nПо результату обучения Вы получите удостоверение о повышении квалификации установленного образца.\nВ 2022 году программу освоили более 700 человек.\n\nСвое обращение можно оставить по почте Online@dvfu.ru \n\nС уважением, команда курса ДВФУ",
                    "tables": []
                }
            },
            {
                "id_step": 1032489,
                "text": {
                    "text": "Содержание урока\n\nосновные понятия реляционных баз данных;\nотношение (таблица);\nиспользуемые типы данных;\nсоздание таблицы SQL запросом;\nдобавление данных SQL запросом.\n",
                    "tables": []
                }
            },
            {
                "id_step": 1042539,
                "text": {
                    "text": "Основные понятия реляционных баз данных\nРеляционная модель была разработана в конце 1960-х годов Е.Ф.Коддом . Она определяет способ представления данных (структуру данных), методы защиты данных (целостность данных), и операции, которые можно выполнять с данными (манипулирование данными). Эта модель лежит в основе всех реляционных баз данных до настоящего времени.\nОсновные принципы реляционных баз данных:\n\nвсе данные на концептуальном уровне представляются в виде объектов, заданных в виде строк и столбцов, называемых отношением, более распространенное название – таблица;\nв пересечение строки и столбца таблицы можно занести только одно значение;\nвсе операции выполняются над целыми отношениями и результатом этих операций является отношение.\n\nПример отношения: \n                         \nНа примере таблицы Сотрудник рассмотрим терминологию реляционных баз данных:\n\nотношение  – это структура данных целиком, набор записей (в обычном понимании – таблица) , в  примере –это Сотрудник;\nкортеж – это каждая строка , содержащая данные (более распространенный термин – запись ), например, <001, Борин С.А, 234-01-23, программист>, все кортежи в отношении должны быть различны;\nмощность – число кортежей в таблице (проще говоря, число записей), в данном случае 3, мощность отношения может быть любой (от 0 до бесконечности), порядок следования кортежей - неважен;\nатрибут – это столбец в таблице (более распространенный термин – поле ), в примере – Табельный номер, Фамилия И.О., Телефон, Должность) \nразмерность – это число атрибутов в таблице, в данном случае – 4;\nразмерность отношения должна быть больше 0, порядок следования атрибутов существенен;\n домен атрибута – это допустимые значения (неповторяющиеся), которые можно занести в поле , например для атрибута Должность домен – {инженер, программист}.\n\nЗадание\nДля таблицы Сотрудник отметьте верные ячейки (В каждом столбце и строке - один правильный ответ).",
                    "tables": []
                }
            },
            {
                "id_step": 1042109,
                "text": {
                    "text": "Отношение, реляционная модель\nБаза данных, в том числе и реляционная, используется для формального описания  некоторой предметной области реального мира, например, склада, учебного процесса и пр. Обязательным этапом перед созданием базы данных является ее проектирование (этот процесс разбирается в следующих модулях).\nВ первом модуле будем рассматривать простейшие предметные области, информацию о которых можно описать в виде одной таблицы. Каждая такая таблица ассоциируется с неким информационным объектом или событием реального мира – человеком, документом, посещением и т.д. \nПример.\nРассмотрим некоторый склад, на котором хранятся книги. Известно название книги, ее автор, количество экземпляров на складе и ее цена.\nВсю эту информацию можно представить в виде таблицы, состоящей из 4 столбцов (приведено только 4 записи, на самом деле их значительно больше):\n\n[TABLE]\n\nПеред созданием таблицы в базе данных необходимо описать ее структуру. Для этого выполняется следующая последовательность шагов:\n1. Дать таблице имя, пусть она будет называться book, вот некоторые правила для выбора имен таблиц:\n\nможет включать латинские буквы, цифры и знак подчеркивания, должно начинаться с буквы;\nимя должно быть уникальным в пределах базы данных.\n\nТакже рекомендуется:\n\nчтобы имя было существительным в единственном числе;\nимя должно быть понятным и соответствовать тому объекту, который оно описывает;\nимя должно быть как можно короче, максимум до 10 символов.\n\nВажно. Имена таблиц являются регистрозависимыми из-за операционной системы на которой работает stepik, то есть имя book и Book – разные имена. Рекомендуется для записи имен таблиц использовать только строчные (маленькие) буквы.\n2. Определить структуру таблицы, из каких атрибутов(столбцов, полей) она будет состоять,  в нашем случае это:\n\ntitle – поле для хранения названия книги;\nauthor – поле с фамилией автора книги ;\npriсe – цена книги;\namount – количество книг.\n\nПравила по выбору имени поля информационного объекта:\n\nможет включать латинские буквы, цифры и знак подчеркивания, должно начинаться с буквы;\nимя поля должно быть уникальным в пределах таблицы.\n\nРекомендации по выбору имени поля информационного объекта:\n\nимя должно быть понятным и соответствовать тем данным, которые хранятся в поле;\nимя может состоять из нескольких слов, тогда слова разделяются подчеркиванием, после подчеркивания слово пишется с маленькой буквы.\n\n3. Включить ключевое поле book_id, которое является ОБЯЗАТЕЛЬНЫМ ЭЛЕМЕНТОМ каждой реляционной таблицы. Ключевое поле является уникальным для каждой записи, однозначно определяет запись и в дальнейшем будет использоваться для связей с другими таблицами.\nРекомендации по именованию  ключевых полей:\n\nимя должно состоять  из двух частей: начинаться с названия таблицы, которой поле принадлежит,   затем через подчеркивание необходимо указать id.\n\nТаким образом, наша таблицаbookбудет выглядеть следующим образом:\n\n[TABLE]\n\nЗадание\nОтметьте ПРАВИЛЬНЫЕ имена, которые можно выбрать в качестве названий таблиц или полей.",
                    "tables": [
                        "{\"0\":{\"0\":\"Название\",\"1\":\"Мастер и Маргарита\",\"2\":\"Белая гвардия\",\"3\":\"Идиот\",\"4\":\"Братья Карамазовы\"},\"1\":{\"0\":\"Автор\",\"1\":\"Булгаков М.А.\",\"2\":\"Булгаков М.А.\",\"3\":\"Достоевский Ф.М.\",\"4\":\"Достоевский Ф.М.\"},\"2\":{\"0\":\"Цена, руб\",\"1\":\"670.99\",\"2\":\"540.50\",\"3\":\"460\",\"4\":\"799.01\"},\"3\":{\"0\":\"Количество\",\"1\":\"3\",\"2\":\"5\",\"3\":\"10\",\"4\":\"2\"}}",
                        "{\"0\":{\"0\":\"book_id\",\"1\":\"1\",\"2\":\"2\",\"3\":\"3\",\"4\":\"4\"},\"1\":{\"0\":\"title\",\"1\":\"Мастер и Маргарита\",\"2\":\"Белая гвардия\",\"3\":\"Идиот\",\"4\":\"Братья Карамазовы\"},\"2\":{\"0\":\"author\",\"1\":\"Булгаков М.А.\",\"2\":\"Булгаков М.А.\",\"3\":\"Достоевский Ф.М.\",\"4\":\"Достоевский Ф.М.\"},\"3\":{\"0\":\"price\",\"1\":\"670.99\",\"2\":\"540.50\",\"3\":\"460\",\"4\":\"799.01\"},\"4\":{\"0\":\"amount\",\"1\":\"3\",\"2\":\"5\",\"3\":\"10\",\"4\":\"2\"}}"
                    ]
                }
            },
            {
                "id_step": 1042241,
                "text": {
                    "text": "Выбор типов данных для полей \nПосле описания структуры таблицы необходимо выбрать типы данных для каждого поля.\nОсновные типы данных SQL:\n\n[TABLE]\n\nРекомендации по выбору типов данных для полей таблицы.\n\nВыбирайте минимальный тип данных исходя из максимального значения поля. Например, если максимальный текст, который может быть записан в поле, имеет длину 25 символов, значит нужно использовать тип VARCHAR(25).\nДля описания ключевого поля используйте описание INT PRIMARY KEY AUTO_INCREMENT. Это значит, что в поле будут заноситься различные целые числа, при этом они будут автоматически генерироваться (каждая следующая строка будет иметь значение ключа на 1 больше предыдущего).\n\nОпределим тип данных для каждого поля таблицы book:\n\n[TABLE]\n\n\nbook_id - ключевой столбец, целое число, которое должно генерироваться автоматически  - INT PRIMARY KEY AUTO_INCREMENT;\ntitle - строка текста, ее длина выбирается в зависимости от данных, которые предполагается хранить в поле, предположим, что название книги не превышает 50 символов - VARCHAR(50);\nauthor - строка текста - VARCHAR(30);\npriсe - для описание денежного значения используется числовой тип данных с двумя знаками после запятой - DECIMAL(8,2);\namount - целое число - INT.\n\nЗадание\nСопоставьте значения и типы данных, с помощью которых их можно описать.",
                    "tables": [
                        "{\"0\":{\"0\":\"Тип данных\",\"1\":\"INT INTEGER\",\"2\":\"DECIMAL NUMERIC\",\"3\":\"DATE\",\"4\":\"VARCHAR\"},\"1\":{\"0\":\"Описание\",\"1\":\"Целое число, могут принимать значения  от -2 147 483 648 до 2 147 483 647\",\"2\":\"Вещественное число,  в скобках указывается максимальная  длина числа (включает символы слева и справа от десятичной запятой)  и количество знаков после запятой.  Можно использовать оба этих типа, они эквивалентны,  принимают значения в диапазоне -1038+1 до 1038-1. DECIMAL(4,1)  NUMERIC(6,3)\",\"3\":\"Дата в формате ГГГГ-ММ-ДД 26 июля 2020 года  3 января 2021 года\",\"4\":\"Строка длиной не более 255 символов,  в скобках указывается максимальная  длина строки, которая может храниться в поле VARCHAR(10)(рассматриваются однобайтовые кодировки,  для которых число в скобках соответствует максимальному  количеству символов в строке)\"},\"2\":{\"0\":\"Пример\",\"1\":\"-567  1205\",\"2\":\"34.6  -3.294\",\"3\":\"2020-07-26  2021-01-03\",\"4\":\"пример  описание\"}}",
                        "{\"0\":{\"0\":\"book_id\",\"1\":\"1\",\"2\":\"2\",\"3\":\"3\",\"4\":\"4\"},\"1\":{\"0\":\"title\",\"1\":\"Мастер и Маргарита\",\"2\":\"Белая гвардия\",\"3\":\"Идиот\",\"4\":\"Братья Карамазовы\"},\"2\":{\"0\":\"author\",\"1\":\"Булгаков М.А.\",\"2\":\"Булгаков М.А.\",\"3\":\"Достоевский Ф.М.\",\"4\":\"Достоевский Ф.М.\"},\"3\":{\"0\":\"price\",\"1\":\"670.99\",\"2\":\"540.50\",\"3\":\"460\",\"4\":\"799.01\"},\"4\":{\"0\":\"amount\",\"1\":\"3\",\"2\":\"5\",\"3\":\"10\",\"4\":\"2\"}}"
                    ]
                }
            },
            {
                "id_step": 1032504,
                "text": {
                    "text": "На этом шаге нужно написать и проверить SQL запрос. Сначала кратко описывается структура и особенности запроса, приводится пример. А затем формулируется задание, для которого нужно реализовать запрос.\nСоздание таблицы\nДля создания таблицы используется SQL-запрос. В нем указывается какая таблица создается, из каких атрибутов(полей) она состоит и какой тип данных имеет каждое поле, при необходимости указывается описание полей (ключевое поле и т.д.). Его структура :\n\nключевые слова : CREATE TABLE\nимя создаваемой таблицы;\nоткрывающая круглая скобка «(»;\nназвание поля и его описание, которое включает тип поля и другие необязательные характеристики;\nзапятая;\nназвание поля и его описание;\n...\nзакрывающая скобка «)».\n\nПример. Создадим таблицу genre следующей структуры:\n\n[TABLE]\n\nЗапрос:\nCREATE TABLE genre(\n    genre_id INT PRIMARY KEY AUTO_INCREMENT, \n    name_genre VARCHAR(30)\n);\nСозданная таблица - пустая.\nРекомендации по записи SQL запроса\n\nКлючевые слова: SQL не является регистрозависимым языком (CREATE и create - одно и тоже ключевое слово). \nКлючевые слова SQL и типы данных рекомендуется  записывать прописными (большими) буквами.\nИмена таблиц и полей - строчными (маленькими) буквами.\nSQL-запрос можно писать на нескольких строках.\nВ конце SQL-запроса ставится точка с запятой (хотя если Вы пишете один запрос, это необязательно).\n\nЗадание\nСформулируйте SQL запрос для создания таблицы book, занесите  его в окно кода (расположено ниже)  и отправьте на проверку (кнопка Отправить). Структура таблицы book:\n\n[TABLE]\n\n \nПояснение - кликните по этой строке, чтобы раскрыть пояснение\nПри записи сохраняйте порядок следования полей. \n\n \nРезультат:\nAffected rows: 0",
                    "tables": [
                        "{\"0\":{\"0\":\"Поле\",\"1\":\"genre_id\",\"2\":\"name_genre\"},\"1\":{\"0\":\"Тип, описание\",\"1\":\"INT PRIMARY KEY AUTO_INCREMENT\",\"2\":\"VARCHAR(30)\"}}",
                        "{\"0\":{\"0\":\"Поле\",\"1\":\"book_id\",\"2\":\"title\",\"3\":\"author\",\"4\":\"price\",\"5\":\"amount\"},\"1\":{\"0\":\"Тип, описание\",\"1\":\"INT PRIMARY KEY AUTO_INCREMENT\",\"2\":\"VARCHAR(50)\",\"3\":\"VARCHAR(30)\",\"4\":\"DECIMAL(8, 2)\",\"5\":\"INT\"}}"
                    ]
                }
            },
            {
                "id_step": 1042705,
                "text": {
                    "text": "На каждом шаге можно посмотреть, как  работает запрос примера. Для этого нужно скопировать его код в окно для ввода и нажать на черную кнопку Запустить код (не отправляя на проверку). Те запросы, которые уже проверены, можно не удалять, а просто закомментировать, используя /* и */.\nВставка записи в таблицу\nДля занесения новой записи в таблицу используется SQL запрос, в котором указывается в какую таблицу, в какие поля заносить новые значения. Структура запроса:\n\nключевые слова INSERT INTO (ключевое слово INTO можно пропустить);\nимя таблицы, в которую добавляется запись;\nоткрывающая круглая скобка «(»;\n список полей через запятую, в которые следует занести новые данные;\nзакрывающая скобка «)»;\nключевое слово VALUES;\nоткрывающая круглая скобка «(»;\nсписок значений через запятую, которые заносятся в соответствующие поля, при этом текстовые значения заключаются в кавычки, числовые значения записываются без кавычек, в качестве разделителя целой и дробной части используется точка;\nзакрывающая скобка «)».\n\nПример. В таблицу, состоящую из двух столбцов добавим новую строку, при этом в поле1 заносится значение1,  в поле2 - значение2.\nINSERT INTO таблица(поле1, поле2) \nVALUES (значение1, значение2);\nВ результате выполнения запроса новая запись заносится в конец обновляемой таблицы.\nПри составлении списка полей и списка значений необходимо учитывать следующее:\n\nколичество полей и количество значений в списках должны совпадать;\nдолжно существовать прямое соответствие между позицией одного и того же элемента в обоих списках, поэтому первый элемент списка значений должен относиться к первому столбцу в списке столбцов, второй – ко второму столбцу и т.д.;\n типы данных элементов в списке значений должны быть совместимы с типами данных соответствующих столбцов таблицы ( целое число можно занести в поле типа DECIMAL, обратная операция - недопустима);\nновые значения нельзя добавлять в поля, описанные как PRIMARY KEY AUTO_INCREMENT;\nрекомендуется заполнять все поля записи, если же поле пропущено, значение этого поля зависит от установленных по умолчанию значений, если значения не установлены - на данной платформе вставляется пустое значение (NULL).\n\nПример\nВставим новую запись в таблицу genre, созданную на предыдущем шаге ( в первых двух строках показана структура таблицы, далее - ее содержимое):\n\n[TABLE]\n\n Запрос:\nINSERT INTO genre (name_genre) \nVALUES ('Роман');\nЗаносится только значение поля name_genre, значение ключевого поля формируется автоматически.\nРезультат:  в таблицу будет вставлена новая строка, после запуска запроса на платформе stepik, имеем:\n\nЧтобы увидеть как именно выглядит таблица genre, можно добавить SQL запрос, который выберет все записи из таблицы:\nSELECT * FROM genre;\nРезультат:\n\nЗадание\nЗанесите новую строку в таблицу book (текстовые значения (тип VARCHAR) заключать либо в двойные, либо в одинарные кавычки):\n\n[TABLE]\n\nРекомендация: текстовые поля копируйте из таблицы, представленной в задании, и вставляйте в запрос во избежание ошибок... \nРезультат:\nAffected rows: 1\nQuery result:\n+---------+--------------------+---------------+--------+--------+\n| book_id | title              | author        | price  | amount |\n+---------+--------------------+---------------+--------+--------+\n| 1       | Мастер и Маргарита | Булгаков М.А. | 670.99 | 3      |\n+---------+--------------------+---------------+--------+--------+",
                    "tables": [
                        "{\"0\":{\"0\":\"genre_id\",\"1\":\"INT PRIMARY KEY AUTO_INCREMENT\",\"2\":\"1\"},\"1\":{\"0\":\"name_genre\",\"1\":\"VARCHAR(30)\",\"2\":\"Роман\"}}",
                        "{\"0\":{\"0\":\"book_id\",\"1\":\"INT PRIMARY KEY AUTO_INCREMENT\",\"2\":\"1\"},\"1\":{\"0\":\"title\",\"1\":\"VARCHAR(50)\",\"2\":\"Мастер и Маргарита\"},\"2\":{\"0\":\"author\",\"1\":\"VARCHAR(30)\",\"2\":\"Булгаков М.А.\"},\"3\":{\"0\":\"price\",\"1\":\"DECIMAL(8,2)\",\"2\":\"670.99\"},\"4\":{\"0\":\"amount\",\"1\":\"INT\",\"2\":\"3\"}}"
                    ]
                }
            },
            {
                "id_step": 1042708,
                "text": {
                    "text": "Задание\nЗанесите три последние записи в таблицуbook,  первая запись уже добавлена на предыдущем шаге:\n\n[TABLE]\n\nПояснение - кликните по этой строке, чтобы раскрыть пояснение\nКаждая строка вставляется отдельным SQL запросом, запросы обязательно разделять точкой с запятой. Для просмотра полученной таблицы после запросов на добавление записей вставить:\nSELECT * FROM book;\n\nРезультат : \nAffected rows: 1\nAffected rows: 1\nAffected rows: 1\nQuery result:\n+---------+--------------------+------------------+--------+--------+\n| book_id | title              | author           | price  | amount |\n+---------+--------------------+------------------+--------+--------+\n| 1       | Мастер и Маргарита | Булгаков М.А.    | 670.99 | 3      |\n| 2       | Белая гвардия      | Булгаков М.А.    | 540.50 | 5      |\n| 3       | Идиот              | Достоевский Ф.М. | 460.00 | 10     |\n| 4       | Братья Карамазовы  | Достоевский Ф.М. | 799.01 | 2      |\n+---------+--------------------+------------------+--------+--------+\nВАЖНО! При вставке строк в таблицу значения ключевых столбцов (в данном случае book_id) указывать НЕ НУЖНО. ",
                    "tables": [
                        "{\"0\":{\"0\":\"book_id\",\"1\":\"INT PRIMARY KEY AUTO_INCREMENT\",\"2\":\"1\",\"3\":\"2\",\"4\":\"3\",\"5\":\"4\"},\"1\":{\"0\":\"title\",\"1\":\"VARCHAR(50)\",\"2\":\"Мастер и Маргарита\",\"3\":\"Белая гвардия\",\"4\":\"Идиот\",\"5\":\"Братья Карамазовы\"},\"2\":{\"0\":\"author\",\"1\":\"VARCHAR(30)\",\"2\":\"Булгаков М.А.\",\"3\":\"Булгаков М.А.\",\"4\":\"Достоевский Ф.М.\",\"5\":\"Достоевский Ф.М.\"},\"3\":{\"0\":\"price\",\"1\":\"DECIMAL(8,2)\",\"2\":\"670.99\",\"3\":\"540.50\",\"4\":\"460.00\",\"5\":\"799.01\"},\"4\":{\"0\":\"amount\",\"1\":\"INT\",\"2\":\"3\",\"3\":\"5\",\"4\":\"10\",\"5\":\"2\"}}"
                    ]
                }
            }
        ]
    }
]