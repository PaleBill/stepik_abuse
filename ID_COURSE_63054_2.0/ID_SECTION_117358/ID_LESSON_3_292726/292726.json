[
    {
        "id_lesson": 292726,
        "steps": [
            {
                "id_step": 1095907,
                "text": {
                    "text": "\n\nCодержание урока\nВ данном уроке с помощью запросов корректировки данных для базы данных «Абитуриент» формируется список абитуриентов, рекомендованных к зачислению в университет:\n\nсоздается таблица с суммой баллов абитуриентов по предметам ЕГЭ в соответствии с поданными заявлениями;\nиз таблицы удаляются абитуриенты, если они не набрали минимального балла по предмету, необходимому для поступления на образовательную программу;\nабитуриентам, у которых есть медаль или значок ГТО, добавляются дополнительные баллы;\nабитуриенты сортируются в соответствии с набранными баллами по каждой образовательной программе;\nформируется список абитуриентов, рекомендованных к зачислению ( вставляется столбец для нумерации, осуществляется нумерация студентов по образовательной программе, выбираются абитуриенты с наибольшими баллами в соответствии с планом набора).\n",
                    "tables": []
                }
            },
            {
                "id_step": 1131901,
                "text": {
                    "text": "Задание\nСоздать вспомогательную таблицу applicant,  куда включить id образовательной программы, id абитуриента, сумму баллов абитуриентов (столбец itog) в отсортированном сначала по id образовательной программы, а потом по убыванию суммы баллов виде (использовать запрос из предыдущего урока).\nФрагмент логической схемы базы данных:\n\nПояснение\nДля просмотра результата выполнения запроса корректировки на этом шаге и на всех остальных,  используется запрос на выборку, который отображает все записи корректируемой таблицы:\nSELECT * FROM таблица;\n\nСвязанные шаги\n\nсоздание таблицы;\nвычисления для сгруппированных данных;\nсоединение таблиц;\nсортировка.\n\n\nТекст задания (чтобы не прокручивать страницу) :\n\n Создать вспомогательную таблицу applicant,  куда включить id образовательной программы,  id абитуриента, сумму баллов абитуриентов (столбец itog) в отсортированном сначала по id образовательной программы, а потом по убыванию суммы баллов виде (использовать запрос из предыдущего урока).\n\nРезультат\nAffected rows: 14\n\nQuery result:\n+------------+-------------+------+\n| program_id | enrollee_id | itog |\n+------------+-------------+------+\n| 1          | 3           | 230  |\n| 1          | 2           | 226  |\n| 1          | 1           | 213  |\n| 2          | 6           | 276  |\n| 2          | 3           | 230  |\n| 2          | 2           | 226  |\n| 3          | 6           | 270  |\n| 3          | 4           | 238  |\n| 3          | 5           | 192  |\n| 3          | 1           | 179  |\n| 4          | 6           | 270  |\n| 4          | 3           | 242  |\n| 4          | 5           | 192  |\n| 4          | 1           | 179  |\n+------------+-------------+------+\n",
                    "tables": []
                }
            },
            {
                "id_step": 1132083,
                "text": {
                    "text": "Задание\nИз таблицы applicant, созданной на предыдущем шаге, удалить записи, если абитуриент на выбранную образовательную программу не набрал минимального балла хотя бы по одному предмету (использовать запрос из предыдущего урока).\nФрагмент логической схемы базы данных:\n\nТаблица applicant:\n\nПояснение\nВозможный вариант решения - использование DELETE совместно с USING, подробно рассмотрено на этом шаге.\n\nСвязанные шаги\n\nудаление строк из таблицы (шаг, шаг);\nусловие отбора\n\n\nТекст задания (чтобы не прокручивать страницу) :\n\nИз таблицы applicant,  созданной на предыдущем шаге, удалить записи, если абитуриент на выбранную образовательную программу не набрал минимального балла хотя бы по одному предмету (использовать запрос из предыдущего урока).\n\nРезультат\nAffected rows: 2\n\nQuery result:\n+------------+-------------+------+\n| program_id | enrollee_id | itog |\n+------------+-------------+------+\n| 1          | 3           | 230  |\n| 1          | 2           | 226  |\n| 1          | 1           | 213  |\n| 2          | 6           | 276  |\n| 2          | 3           | 230  |\n| 2          | 2           | 226  |\n| 3          | 6           | 270  |\n| 3          | 4           | 238  |\n| 3          | 5           | 192  |\n| 4          | 6           | 270  |\n| 4          | 3           | 242  |\n| 4          | 5           | 192  |\n+------------+-------------+------+\nAffected rows: 12\n",
                    "tables": []
                }
            },
            {
                "id_step": 1132180,
                "text": {
                    "text": "Задание\nПовысить итоговые баллы абитуриентов в таблице applicant на значения дополнительных баллов (использовать запрос из предыдущего урока).\nФрагмент логической схемы базы данных:\n\nСтруктура корректируемой таблицы:\n\nПояснение\n1. В запросах на обновление можно использовать несколько связанных таблиц. Например, чтобы обновить поле itog таблицы applicant для записей, относящихся к образовательной программе «Прикладная механика», используется запрос:\nUPDATE \n    applicant\n    INNER JOIN program ON applicant.program_id = program.program_id\nSET itog = 2\nWHERE name_program = \"Прикладная механика\";\n\n2. В нашем случае вместо таблицы program можно использовать вложенный запрос, в котором посчитаны дополнительные баллы абитуриентов. А в качестве условия соединения таблиц после ключевого слова  ON указать, что id абитуриентов в таблице applicant и во вложенном запросе совпадают.\n\nСвязанные шаги\n\nобновление данных (шаг, шаг, шаг);\nвычисления для сгруппированных данных.\n\n\nТекст задания (чтобы не прокручивать страницу) :\n\nПовысить итоговые баллы абитуриентов в таблице applicant на значения дополнительных баллов (использовать запрос из предыдущего урока).\n\nРезультат\nAffected rows: 7\n\nQuery result:\n+------------+-------------+------+\n| program_id | enrollee_id | itog |\n+------------+-------------+------+\n| 1          | 3           | 235  |\n| 1          | 2           | 226  |\n| 1          | 1           | 219  |\n| 2          | 6           | 276  |\n| 2          | 3           | 235  |\n| 2          | 2           | 226  |\n| 3          | 6           | 270  |\n| 3          | 4           | 239  |\n| 3          | 5           | 200  |\n| 4          | 6           | 270  |\n| 4          | 3           | 247  |\n| 4          | 5           | 200  |\n+------------+-------------+------+\n",
                    "tables": []
                }
            },
            {
                "id_step": 1132364,
                "text": {
                    "text": "Задание\nПоскольку при добавлении дополнительных баллов, абитуриенты по каждой образовательной программе могут следовать не в порядке убывания суммарных баллов, необходимо создать новую таблицу applicant_order на основе таблицы applicant. При создании таблицы данные нужно отсортировать сначала по id образовательной программы, потом по убыванию итогового балла. А таблицу applicant, которая была создана как вспомогательная, необходимо удалить.\nСтруктура корректируемой таблицы:\n\nПояснение\nДля удаления таблицы используется SQL запрос DROP:\nDROP TABLE таблица;\n\nСвязанные шаги\n\nсоздание таблицы;\nсортировка.\n\n\nТекст задания (чтобы не прокручивать страницу) :\n\nПоскольку при добавлении дополнительных баллов, абитуриенты по каждой образовательной программе могут следовать не в порядке убывания суммарных баллов, необходимо создать новую таблицу applicant_order на основе таблицы applicant. При создании таблицы данные нужно отсортировать сначала по id образовательной программы, потом по убыванию итогового балла. А таблицу applicant, которая была создана как вспомогательная, необходимо удалить.\n\nРезультат\nAffected rows: 12\n\nAffected rows: 0\n\nQuery result:\n+------------+-------------+------+\n| program_id | enrollee_id | itog |\n+------------+-------------+------+\n| 1          | 3           | 235  |\n| 1          | 2           | 226  |\n| 1          | 1           | 219  |\n| 2          | 6           | 276  |\n| 2          | 3           | 235  |\n| 2          | 2           | 226  |\n| 3          | 6           | 270  |\n| 3          | 4           | 239  |\n| 3          | 5           | 200  |\n| 4          | 6           | 270  |\n| 4          | 3           | 247  |\n| 4          | 5           | 200  |\n+------------+-------------+------+\n",
                    "tables": []
                }
            },
            {
                "id_step": 1132184,
                "text": {
                    "text": "Зачисление студентов\nРассмотрим, как происходит формирование списка абитуриентов, проходящих по конкурсу на образовательные программы. \nВ таблицу applicant_order для пояснения включены столбцы «План набора» и «Результат». Каждая программа имеет свой план набора, например, план набора образовательной программы с id 1 – 2 человека.  Проходящими по конкурсу считаются первые два человека в списке  отсортированных по итоговому баллу абитуриентов, подавших заявление на  образовательную программу. Это абитуриенты с id 3 и 2. Аналогично отбираются абитуриенты на остальные образовательные программы. В таблице все проходящие по конкурсу выделены зеленым цветом.\n\n[TABLE]\n\nДля отбора рекомендованных к зачислению студентов можно разработать различные алгоритмы. Мы реализуем несколько SQL запросов. В первом запросе вставим в таблицу applicant_order новый столбец для последовательной нумерации строк. \nДля изменения структуры таблицы используется оператор ALTER TABLE. С его помощью можно вставить новый столбец, удалить существующий, переименовать столбец и пр.\nДля вставки нового столбца используется SQL запросы:\nALTER TABLE таблица ADD имя_столбца тип; - вставляет столбец после последнего\nALTER TABLE таблица ADD имя_столбца тип FIRST; - вставляет столбец перед первым\nALTER TABLE таблица ADD имя_столбца тип AFTER имя_столбца_1; - вставляет столбец после укзанного столбца\nДля удаления столбца используется SQL запросы:\nALTER TABLE таблица DROP COLUMN имя_столбца; - удаляет столбец с заданным именем\nALTER TABLE таблица DROP имя_столбца; - ключевое слово COLUMN не обязательно указывать\nALTER TABLE таблица DROP имя_столбца,\n                    DROP имя_столбца_1; - удаляет два столбца\nДля переименования столбца используется  запрос (тип данных указывать обязательно):\nALTER TABLE таблица CHANGE имя_столбца новое_имя_столбца ТИП ДАННЫХ;\nДля изменения типа  столбца используется запрос (два раза указывать имя столбца обязательно): \nALTER TABLE таблица CHANGE имя_столбца имя_столбца НОВЫЙ_ТИП_ДАННЫХ;\nЗадание\nВключить в таблицу applicant_order новый столбец str_id целого типа , расположить его перед первым.\nСтруктура корректируемой таблицы:\n\nРезультат\n+--------+------------+-------------+------+\n| str_id | program_id | enrollee_id | itog |\n+--------+------------+-------------+------+\n| Null   | 1          | 3           | 235  |\n| Null   | 1          | 2           | 226  |\n| Null   | 1          | 1           | 219  |\n| Null   | 2          | 6           | 276  |\n| Null   | 2          | 3           | 235  |\n| Null   | 2          | 2           | 226  |\n| Null   | 3          | 6           | 270  |\n| Null   | 3          | 4           | 239  |\n| Null   | 3          | 5           | 200  |\n| Null   | 4          | 6           | 270  |\n| Null   | 4          | 3           | 247  |\n| Null   | 4          | 5           | 200  |\n+--------+------------+-------------+------+\n",
                    "tables": [
                        "{\"0\":{\"0\":\"program_id\",\"1\":\"1\",\"2\":\"1\",\"3\":\"1\",\"4\":\"2\",\"5\":\"2\",\"6\":\"2\",\"7\":\"3\",\"8\":\"3\",\"9\":\"3\",\"10\":\"4\",\"11\":\"4\",\"12\":\"4\"},\"1\":{\"0\":\"план набора\",\"1\":\"2\",\"2\":\"2\",\"3\":\"2\",\"4\":\"1\",\"5\":\"1\",\"6\":\"1\",\"7\":\"2\",\"8\":\"2\",\"9\":\"2\",\"10\":\"3\",\"11\":\"3\",\"12\":\"3\"},\"2\":{\"0\":\"enrollee_id\",\"1\":\"3\",\"2\":\"2\",\"3\":\"1\",\"4\":\"6\",\"5\":\"3\",\"6\":\"2\",\"7\":\"6\",\"8\":\"4\",\"9\":\"5\",\"10\":\"6\",\"11\":\"3\",\"12\":\"5\"},\"3\":{\"0\":\"itog\",\"1\":\"235\",\"2\":\"226\",\"3\":\"219\",\"4\":\"276\",\"5\":\"235\",\"6\":\"226\",\"7\":\"270\",\"8\":\"239\",\"9\":\"200\",\"10\":\"270\",\"11\":\"247\",\"12\":\"200\"},\"4\":{\"0\":\"Результат\",\"1\":\"рекомендован к зачислению\",\"2\":\"рекомендован к зачислению\",\"3\":null,\"4\":\"рекомендован к зачислению\",\"5\":null,\"6\":null,\"7\":\"рекомендован к зачислению\",\"8\":\"рекомендован к зачислению\",\"9\":null,\"10\":\"рекомендован к зачислению\",\"11\":\"рекомендован к зачислению\",\"12\":\"рекомендован к зачислению\"}}"
                    ]
                }
            },
            {
                "id_step": 1133952,
                "text": {
                    "text": "Нумерация строк\nНомер строки в таблице или запросе в некоторых версиях SQL можно получить с помощью оконной функции  row_number().  Когда создавался этот шаг версии SQL на платформе Stepik эта функция не поддерживалась. Сейчас версию изменили, оконные функции рассматриваются в следующем уроке.\nНа этом шаге нумерацию реализуем с помощью переменных.  Переменные задаются с помощью ключевого слова SET,  перед именем указывается символ @. Например, создадим переменную @row_num и присвоим ей значение 1:\nSET @row_num := 1;\nТеперь эту переменную можно использовать в запросах,  кроме того в запросах можно изменить ее значение. \nПример\nПронумеруем записи в таблице applicant_order.\nЗапрос:\nSET @row_num := 0;\n\nSELECT *, (@row_num := @row_num + 1) AS str_num\nFROM  applicant_order;\nРезультат:\n+------------+-------------+------+---------+\n| program_id | enrollee_id | itog | str_num |\n+------------+-------------+------+---------+\n| 1          | 3           | 235  | 1       |\n| 1          | 2           | 226  | 2       |\n| 1          | 1           | 219  | 3       |\n| 2          | 6           | 276  | 4       |\n| 2          | 3           | 235  | 5       |\n| 2          | 2           | 226  | 6       |\n| 3          | 6           | 270  | 7       |\n| 3          | 4           | 239  | 8       |\n| 3          | 5           | 200  | 9       |\n| 4          | 6           | 270  | 10      |\n| 4          | 3           | 247  | 11      |\n| 4          | 5           | 200  | 12      |\n+------------+-------------+------+---------+\nПояснение\nВыражение  @row_num := @row_num + 1 означает, что для каждой записи, выводимой в запрос, значение переменной @row_num увеличивается на 1. В результате получается нумерация строк запроса.\n\nПример\nСоздадим нумерацию, которая начинается заново для каждой образовательной программы. Для этого можно использовать алгоритм, в котором в переменную @row_num заносится 1, если id программы в предыдущей записи не равен id программы в текущей:\n\nобъявить переменную @num_pr, задать ей начальное значение;\nзапомнить id образовательной программы для текущей записи в переменной @num_pr;\nдля следующей записи сравнить значение переменной @num_pr с id образовательной программы;\nесли они равны, то продолжить нумерацию @row_num := @row_num + 1;\nв противном случае начать нумерацию снова, для этого установить @row_num := 1.\n\nЗапрос:\nSET @num_pr := 0;\nSET @row_num := 1;\n\nSELECT *, \n     if(program_id = @num_pr, @row_num := @row_num + 1, @row_num := 1) AS str_num,\n     @num_pr := program_id AS add_var \nfrom applicant_order;\n\nРезультат:\n+------------+-------------+------+---------+---------+\n| program_id | enrollee_id | itog | str_num | add_var |\n+------------+-------------+------+---------+---------+\n| 1          | 3           | 235  | 1       | 1       |\n| 1          | 2           | 226  | 2       | 1       |\n| 1          | 1           | 219  | 3       | 1       |\n| 2          | 6           | 276  | 1       | 2       |\n| 2          | 3           | 235  | 2       | 2       |\n| 2          | 2           | 226  | 3       | 2       |\n| 3          | 6           | 270  | 1       | 3       |\n| 3          | 4           | 239  | 2       | 3       |\n| 3          | 5           | 200  | 3       | 3       |\n| 4          | 6           | 270  | 1       | 4       |\n| 4          | 3           | 247  | 2       | 4       |\n| 4          | 5           | 200  | 3       | 4       |\n+------------+-------------+------+---------+---------+\nЗадание\nЗанести в столбец str_id таблицы applicant_order нумерацию абитуриентов, которая начинается с 1 для каждой образовательной программы.\nСтруктура корректируемой таблицы:\n\nПояснение\nВ запросе на обновление используйте вложенный запрос , в котором нумеруются записи таблицы applicant_order по образовательным программам. В качестве условия соединения таблицы и вложенного запроса после ключевого слова   указать, что id программ в таблице applicant_order и во вложенном запросе совпадают, а также id абитуриентов в таблице applicant_order и во вложенном запросе совпадают.\n\nПояснение от Илья Бодня\nВ IF можно делать операции над несколькими переменными, используя AND. То есть\nIF(логическое_выражение, выражение AND выражение, выражение)\n\nСвязанные шаги\n\nобновление данных.\n\n\nРезультат\nAffected rows: 12\n\nQuery result:\n+--------+------------+-------------+------+\n| str_id | program_id | enrollee_id | itog |\n+--------+------------+-------------+------+\n| 1      | 1          | 3           | 235  |\n| 2      | 1          | 2           | 226  |\n| 3      | 1          | 1           | 219  |\n| 1      | 2          | 6           | 276  |\n| 2      | 2          | 3           | 235  |\n| 3      | 2          | 2           | 226  |\n| 1      | 3          | 6           | 270  |\n| 2      | 3          | 4           | 239  |\n| 3      | 3          | 5           | 200  |\n| 1      | 4          | 6           | 270  |\n| 2      | 4          | 3           | 247  |\n| 3      | 4          | 5           | 200  |\n+--------+------------+-------------+------+\n",
                    "tables": []
                }
            },
            {
                "id_step": 1133970,
                "text": {
                    "text": "Задание\nСоздать таблицу student,  в которую включить абитуриентов, которые могут быть рекомендованы к зачислению  в соответствии с планом набора. Информацию отсортировать сначала в алфавитном порядке по названию программ, а потом по убыванию итогового балла.\nФрагмент логической схемы базы данных:\n\nПояснение\nНа каждую образовательную программу может быть зачислено только обозначенное в плане число абитуриентов (например, n). Выбираются первые n абитуриентов, набравших наибольшее количество баллов. В str_id содержится нумерация (отсортированных по сумме баллов абитуриентов), начинающаяся с 1 для каждой образовательной программы. И соответственно, если по плану нужно зачислить n абитуриентов, то выбираются все абитуриенты, порядковый номер которых в str_id меньше или равен n.\nТо есть в таблицу на каждую образовательную программу включить абитуриентов, значение str_id которых в таблице applicant_order меньше или равно плану.\n\nСвязанные шаги\n\nсоздание таблицы;\nсоединение таблиц;\nусловие отбора.\n\n\nТекст задания (чтобы не прокручивать страницу):\n\nСоздать таблицу student,  в которую включить абитуриентов, которые могут быть рекомендованы к зачислению  в соответствии с планом набора. Информацию отсортировать сначала в алфавитном порядке по названию программ, а потом по убыванию итогового балла.\n\nРезультат\nAffected rows: 8\n\nQuery result:\n+-------------------------------------+-----------------+------+\n| name_program                        | name_enrollee   | itog |\n+-------------------------------------+-----------------+------+\n| Математика и компьютерные науки     | Степанова Дарья | 276  |\n| Мехатроника и робототехника         | Степанова Дарья | 270  |\n| Мехатроника и робототехника         | Семенов Иван    | 247  |\n| Мехатроника и робототехника         | Попов Илья      | 200  |\n| Прикладная математика и информатика | Семенов Иван    | 235  |\n| Прикладная математика и информатика | Абрамова Катя   | 226  |\n| Прикладная механика                 | Степанова Дарья | 270  |\n| Прикладная механика                 | Яковлева Галина | 239  |\n+-------------------------------------+-----------------+------+\n",
                    "tables": []
                }
            },
            {
                "id_step": 1133986,
                "text": {
                    "text": "Задание\nПридумайте один или несколько запросов корректировки данных для предметной области «Абитуриент» (в таблицы занесены данные, как на предыдущем шаге, таблица student создана). Проверьте, правильно ли они работают.\nПри желании можно формулировку запросов  разместить в комментариях. \nРазмещенные задания можно реализовать для закрепления материала урока.\nОценивайте понравившиеся Вам запросы.",
                    "tables": []
                }
            }
        ]
    }
]